#compdef go
# ------------------------------------------------------------------------------
# Copyright (c) 2016 Github zsh-users - http://github.com/zsh-users
# Copyright (c) 2013-2015 Robby Russell and contributors (see
# https://github.com/robbyrussell/oh-my-zsh/contributors)
# Copyright (c) 2010-2014 Go authors
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the zsh-users nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL ZSH-USERS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for go 1.5 (http://golang.org).
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Mikkel Oscar Lyderik <mikkeloscar@gmail.com>
#  * oh-my-zsh authors:
#        https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/golang/golang.plugin.zsh
#  * Go authors
#
# ------------------------------------------------------------------------------

typeset -A opt_args

_go() {
  local -a commands
  local -a __build_flags
  local -a __test_build_flags __test_binary_flags __test_profile_flags

  commands=(
  'build:compile packages and dependencies'
  'clean:remove object files'
  'doc:show documentation for package or symbol'
  'env:print Go environment information'
  'fix:run go tool fix on packages'
  'fmt:run gofmt on package sources'
  'generate:generate Go files by processing source'
  'get:download and install packages and dependencies'
  'install:compile and install packages and dependencies'
  'list:list packages'
  'run:compile and run Go program'
  'test:test packages'
  'tool:run specified go tool'
  'version:print Go version'
  'vet:run go tool vet on packages'
  'help:get more information about a command'
  )

  _go_files() {
    _files -g "*.go(-.)"
  }

  __go_packages() {
    local gopaths
    declare -a gopaths
    gopaths=("${(s/:/)$(go env GOPATH)}")
    gopaths+=("$(go env GOROOT)")
    for p in $gopaths; do
      _alternative ':go packages:_path_files -W "$p/src" -/'
    done
    _alternative '*:go file:_go_files'
  }

  __build_flags() {
    _arguments \
      '-a[force rebuilding of packages that are already up-to-date]' \
      '-n[print the commands but do not run them]' \
      '-p[number of builds that can be run in parallel]:number' \
      '-race[enable data race detection]' \
      '-v[print the names of packages as they are compiled]' \
      '-work[print temporary work directory and keep it]' \
      '-x[print the commands]' \
      '-asmflags=[arguments for each go tool asm invocation]: :->asmflags' \
      '-buildmode=[build mode to use]: :->buildmode' \
      '-compiler[name of compiler to use]:name' \
      '-gccgoflags[arguments for gccgo]:args' \
      '-gcflags=[arguments to pass on each go tool compile invocation]: :->gcflags' \
      '-installsuffix[suffix to add to package directory]:suffix' \
      '-ldflags=[arguments to pass on each go tool link invocation]: :->ldflags' \
      '-linkshared[link against shared libraries]' \
      '-pkgdir[install and load all packages from dir]:dir' \
      '-tags=[list of build tags to consider satisfied]:tags' \
      '-toolexec[program to use to invoke toolchain programs]:args' \
      '-debug-actiongraph[Undocumented, unstable debugging flags. action graph]' \
      '-debug-deprecated-importcfg[Undocumented, unstable debugging flags. deprecated import config]'

    case $state in
      asmflags)
        local -a __asm_flags
        __asm_flags=(
        '-D[predefined symbol with optional simple value -D=identifier=value; can be set multiple times]:value'
        '-I[include directory; can be set multiple times]:value'
        '-S[print assembly and machine code]'
        '-debug[dump instructions as they are parsed]'
        '-dynlink[support references to Go symbols defined in other shared libraries]'
        '-e[no limit on number of errors reported]'
        '-o[output file; default foo.o for /a/b/c/foo.s as first argument]:string'
        '-shared[generate code that can be linked into a shared library]'
        '-trimpath[remove prefix from recorded source file paths]:string'
        )
        _values \
          'asmflags' \
          ${__asm_flags[@]}
        ;;

      buildmode)
        local -a __buildmode
        __buildmode=(
        'archive[Build the listed non-main packages into .a files]'
        'c-archive[Build the listed main package, plus all packages it imports, into a C archive file]'
        'c-shared[Build the listed main packages, plus all packages that they import, into C shared libraries]'
        'default[Listed main packages are built into executables and listed non-main packages are built into .a files]'
        'shared[Combine all the listed non-main packages into a single shared library that will be used when building with the -linkshared option]'
        'exe[Build the listed main packages and everything they import into executables]'
        'pie[Build the listed main packages and everything they import into position independent executables (PIE)]'
        'plugin[Build the listed main packages, plus all packages that they import, into a Go plugin]'
        )
        _values \
          'buildmode' \
          ${__buildmode[@]}
        ;;

      gcflags)
        local -a __gcflags
        __gcflags=(
        '-%[debug non-static initializers]'
        '-+[compiling runtime]'
        '-B[disable bounds checking]'
        '-C[disable printing of columns in error messages]'
        '-D[set relative path for local imports]:path:_files'
        '-E[debug symbol export]'
        '-I[add directory to import search path]:directory:_directories'
        '-K[debug missing line numbers]'
        '-N[disable optimizations]'
        '-S[print assembly listing]'
        '-V[print compiler version]'
        '-W[debug parse tree after type checking]'
        '-asmhdr[write assembly header to file]:file:_files'
        '-bench[append benchmark times to file]:file:_files'
        '-blockprofile[write block profile to file]:file:_files'
        '-buildid[record id as the build id in the export metadata]:id'
        '-c[concurrency during compilation, 1 means no concurrency (default 1)]:num concurrency'
        '-complete[compiling complete package (no C or assembly)]'
        '-cpuprofile[write cpu profile to file]:file:_files'
        '-d[print debug information about items in list; try -d help]:list'
        '-dolinkobj[generate linker-specific objects; if false, some invalid code may compile (default true)]'
        '-dwarf[generate DWARF symbols (default true)]'
        '-dynlink[support references to Go symbols defined in other shared libraries]'
        '-e[no limit on number of errors reported]'
        '-f[debug stack frames]'
        '-goversion[required version of the runtime]:go version'
        '-h[halt on error]'
        '-i[debug line number stack]'
        '-importcfg[read import configuration from file]:file:_files'
        '-importmap[add definition of the form source=actual to import map]:definition'
        '-installsuffix[set pkg directory suffix]:suffix'
        '-j[debug runtime-initialized variables]'
        '-l[disable inlining]'
        '-linkobj[write linker-specific object to file]:file:_files'
        '-live[debug liveness analysis]'
        '-m[print optimization decisions]'
        '-memprofile[write memory profile to file]:file:_files'
        '-memprofilerate[set runtime.MemProfileRate to rate]:rate'
        '-msan[build code compatible with C/C++ memory sanitizer]'
        '-mutexprofile[write mutex profile to file]:file:_files'
        '-nolocalimports[reject local (relative) imports]'
        '-o[write output to file]:file:_files'
        '-p[set expected package import path]:path:_files'
        '-pack[write package file instead of object file]'
        '-r[debug generated wrappers]'
        '-race[enable race detector]'
        '-s[warn about composite literals that can be simplified]'
        '-shared[generate code that can be linked into a shared library]'
        '-std[compiling standard library]'
        '-traceprofile[write an execution trace to file]:file:_files'
        '-trimpath[remove prefix from recorded source file paths]:prefix'
        '-u[reject unsafe code]'
        '-v[increase debug verbosity]'
        '-w[debug type checking]'
        '-wb[enable write barrier (default true)]'
        )
        _values \
          'gcflags' \
          ${__gcflags[@]}
        ;;

      ldflags)
        local -a __ldflags
        __ldflags=(
        '-B[add an ELF NT_GNU_BUILD_ID note when using ELF]:note'
        '-C[check Go calls to C code]'
        '-D[set data segment address (default -1)]:address'
        '-E[set entry symbol name]:entry'
        '-H[set header type]:type'
        '-I[use linker as ELF dynamic linker]:linker'
        '-L[add specified directory to library path]:directory:_path_files -/'
        '-R[set address rounding quantum (default -1)]:quantum'
        '-T[set text segment address (default -1)]:address'
        '-V[print version and exit]'
        '-X[add string value definition of the form importpath.name=value]:definition'
        '-a[disassemble output]'
        '-buildid[record id as Go toolchain build id]:id'
        '-buildmode[set build mode]:mode:(archive c-archive c-shared default shared exe pie)'
        '-c[dump call graph]'
        '-cpuprofile[write cpu profile to file]:file:_files'
        '-d[disable dynamic executable]'
        '-dumpdep[dump symbol dependency graph]'
        '-extar[archive program for buildmode=c-archive]:string'
        '-extld[use linker when linking in external mode]:linker'
        '-extldflags[pass flags to external linker]:flags'
        '-f[ignore version mismatch]'
        '-g[disable go package data checks]'
        '-h[halt on error]'
        '-installsuffix[\[suffix\]: set package directory suffix]:suffix'
        '-k[set field tracking symbol]:symbol'
        '-libgcc[compiler support lib for internal linking; use "none" to disable]:string'
        '-linkmode[set link mode (internal, external, auto)]:mode(internal external auto)'
        '-linkshared[link against installed Go shared libraries]'
        '-memprofile[write memory profile to file]:file:_files'
        '-memprofilerate[set runtime.MemProfileRate to rate]:rate'
        '-msan[enable MSan interface]'
        '-n[dump symbol table]'
        '-o[write output to file]:file:_files'
        '-r[set the ELF dynamic linker search path to dir1:dir2:...]:path:_path_files'
        '-race[enable race detector]'
        '-s[disable symbol table]'
        '-shared[generate shared object (implies -linkmode external)]'
        '-tmpdir[use directory for temporary files]:directory:_path_files -/'
        '-u[reject unsafe packages]'
        '-v[print link trace]'
        '-w[disable DWARF generation]'
        )
        _values \
          'ldflags' \
          ${__ldflags[@]}
        ;;
    esac
  }

  __test_build_flags=(
  '-args[Pass the remainder of the command line to the test binary]'
  '-c[Compile the test binary to pkg.test but do not run it]'
  "-exec=[Run the test binary using 'xprog']:xprog"
  '-i[Install packages that are dependencies of the test]'
  '-o[Compile the test binary to the named file]:binary file name:_files'
  )

  # TODO(zchee): Support for regexp keyword
  __test_binary_flags=(
  "-bench[Run (sub)benchmarks matching a regular expression]:regexp of Benchmark functions:(.)"
  '-benchmem[Print memory allocation statistics for benchmarks]'
  '-count[Run each test and benchmark n times (default: 1)]:count'
  '-cover[Enable coverage analysis]'
  '-covermode[Set the mode for coverage analysis for the packages being tested (default: set)]:(set count atomic)'
  '-coverpkg[Apply coverage analysis in each test to the given list of packages]: :__go_packages'
  '-cpu[Specify a list of GOMAXPROCS values for which the tests or benchmarks should be executed]:(1 2 4)'
  '-parallel=[Allow parallel execution of test functions that call t.Parallel]:number of parallel'
  '-run[Run only those tests and examples matching the regular expression]:regexp of Tests or Examples'
  '-short[Tell long-running tests to shorten their run time]'
  '-timeout[If a test runs longer than arg time, panic (default: 10m)]:timeout (default: 10m)'
  '-v[output log all tests as they are run and print all text from Log and Logf]'
  )

  __test_profile_flags=(
  '-benchtime[Run enough iterations of each benchmark to take arg time]:bench time (specified as a time.Duration: e.g. 1h30s)'
  '-blockprofile[Write a goroutine blocking profile to the specified file]:profile file path:_files'
  '-blockprofilerate[Control the detail provided in goroutine blocking profiles by calling runtime.SetBlockProfileRate]:block profile rate'
  '-coverprofile[Write a coverage profile to the file after all tests have passed]:coverage profile file path:_files'
  '-cpuprofile[Write a CPU profile to the specified file before exiting]:cpu profile file path:_files'
  '-memprofile[Write a memory profile to the file after all tests have passed]:memory profile file:_files'
  '-memprofilerate[Enable more precise memory profiles by setting runtime.MemProfileRate]:memory profile rate'
  '-mutexprofile[Enable more precise (and expensive) memory profiles]:mutex profile file:_files'
  '-mutexprofilefraction[Sample 1 in n stack traces of goroutines holding a contended mutex]:mutex fraction'
  '-outputdir[Place output files from profiling in the specified directory]:output directory:_path_files -/'
  '-trace[Write an execution trace to the specified file before exiting]:output trace file path:_files'
  )

  _arguments \
    "1: :{_describe 'command' commands}" \
    '*:: :->args'

  case $state in
    args)
      case $words[1] in
        build)
          _arguments \
            '-o[force build to write to named output file]:file:_files' \
            '-i[installs the packages that are dependencies of the target]' \
            '*: :__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        clean)
          _arguments \
            '-cache[clean to remove the entire go build cache, in addition to cleaning specified packages (if any)]' \
            '-testcache[clean to expire all test results in the go build cache]' \
            '-i[remove corresponding installed archive or binary]' \
            '-r[apply clean recursively on all dependencies]' \
            '*:go packages:__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        doc)
          _arguments \
            '-c[respect case when matching symbols]' \
            '-cmd[treat a command (package main) like a regular package]' \
            '-u[show docs for unexported and exported symbols and methods]' \
            '*: :__go_packages'
          ;;

        fix)
          _arguments \
            '*: :__go_packages'
          ;;

        fmt)
          _arguments \
            '-n[prints commands that would be executed]' \
            '-x[prints commands as they are executed]' \
            '*: :__go_packages'
          ;;

        generate)
          _arguments \
            '-run=[specifies a regular expression to select directives]:regex' \
            '-x[print the commands]' \
            '-n[print the commands but do not run them]' \
            '-v[print the names of packages as they are compiled]' \
            "*:args:{ _alternative ': :__go_packages' _files }"
          ;;

        get)
          _arguments \
            '-d[instructs get to stop after downloading the packages]' \
            '-f[force get -u not to verify that each package has been checked from vcs]' \
            '-fix[run the fix tool on the downloaded packages]' \
            '-insecure[permit fetching/resolving custom domains]' \
            '-t[also download the packages required to build tests]' \
            '-u[use the network to update the named packages]' \
            '*: :__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        install)
          _arguments \
            '-i[installs the dependencies of the named packages as well]' \
            '*: :__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        list)
          _arguments \
            '-e[changes the handling of erroneous packages]' \
            '-f[specifies an alternate format for the list]:format' \
            '-json[causes package data to be printed in JSON format]' \
            "*:go file:{ _alternative ': :__go_packages' _files }"
            _alternative ':build flags:__build_flags'
          ;;

        run)
          _arguments \
            '-exec[invoke the binary using xprog]:xporg' \
            '1:go run file:_go_files'
            _alternative ':build flags:__build_flags'
          ;;

        test)
          _arguments \
            ${__test_build_flags[@]} \
            ${__test_binary_flags[@]} \
            ${__test_profile_flags[@]} \
            '*: :__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        tool)
          local -a tools
          tools=(
          'addr2line:minimal simulation of the GNU addr2line tool'
          'api:computes the exported API of a set of Go packages'
          'asm:assembles the source file into an object file'
          'buildid:Buildid displays or updates the build ID stored in a Go package or binary. By default, buildid prints the build ID found in the named file'
          'cgo:enables the creation of Go packages that call C code'
          'compile:compiles a single Go package comprising the files named on the command line'
          'cover:analyzing the coverage profiles generated by go test -coverprofile'
          'dist:bootstrapping tool for the Go distribution'
          'doc:Show the documentation for the package, symbol, and method'
          'fix:finds Go programs that use old APIs and rewrites them to use newer ones'
          'link:reads the Go archive or object for a package, and combines them into an executable binary'
          'nm:lists the symbols defined or used by an object file, archive, or executable'
          'objdump:disassembles executable files'
          'pack:simple version of the traditional Unix ar tool'
          'pprof:interprets and displays profiles of Go programs'
          'trace:viewing trace files'
          'vet:examines Go source code and reports suspicious constructs'
          )

          _arguments \
            '-n[print command that would be executed]' \
            "1: :{_describe 'tool' tools}" \
            '*:: :->args'

          case $state in
            args)
              case $words[1] in
                addr2line)
                  _arguments \
                    '*:binary:_object_files'
                  ;;

                api)
                  _arguments \
                    '-allow_new[allow API additions (default true)]' \
                    '-c[optional comma-separated filename(s) to check API against]:string' \ 
                    '-contexts[optional comma-separated list of <goos>-<goarch>[-cgo] to override default contexts]:string' \
                    '-except[optional filename of packages that are allowed to change without triggering a failure in the tool]:string' \
                    '-next[optional filename of tentative upcoming API features for the next release]:string' \
                    '-v[verbose debugging]'
                  ;;

                asm)
                  _arguments \
                    ${__asm_flags[@]}
                  ;;

                buildid)
                  _arguments \
                    '-w[rewrites the build ID found in the file to accurately record a content hash of the file]:_files'
                  ;;

                cgo)
                  _arguments \
                    '-debug-define[print relevant #defines]' \
                    '-debug-gcc[print gcc invocations]' \
                    '-dynimport[if non-empty, print dynamic import data for that file]:output filename (string)' \
                    '-dynlinker[record dynamic linker information in -dynimport mode]' \
                    '-dynout[write -dynimport output to this file]:output filename (string)' \
                    '-dynpackage[set Go package for -dynimport output]:string' \
                    '-exportheader[where to write export header if any exported functions]:export header filename (string)' \
                    '-gccgo[generate files for use with gccgo]' \
                    '-gccgopkgpath[-fgo-pkgpath option used with gccgo]:-fgo-pkgpath (string)'\
                    '-gccgoprefix[-fgo-prefix option used with gccgo]:-fgo-prefix (string)' \
                    '-godefs[for bootstrap: write Go definitions for C file to standard output]' \
                    '-import_runtime_cgo[import runtime/cgo in generated code]' \
                    '-import_syscall[import syscall in generated code]' \
                    '-importpath[import path of package being built]:import path (string)' \
                    '-objdir[object directory]:directory path (string)' \
                    '-srcdir[source directory]:directory path (string)' \
                    '*:go file:_files -g "*.go(-.)"'
                  ;;

                compile)
                  _arguments \
                    ${__gcflags[@]} \
                    '*:file:_path_files -g "*.go"'
                  ;;

                cover)
                  if (( CURRENT == 2 )); then
                    _arguments \
                      '-func=[output coverage profile information for each function]:string' \
                      '-html=[generate HTML representation of coverage profile]:file:_files' \
                      '-mode=[coverage mode]:mode:(set count atomic)'
                  fi

                  _arguments \
                    '-o[file for output]:file:_files' \
                    '-var=[name of coverage variable to generate]:coverage var name' \
                    '*:file:_path_files -g "*.go"'
                  ;;

                #----------------------------

                doc)
                  _arguments \
                    '-c[respect case when matching symbols]' \
                    '-cmd[treat a command (package main) like a regular package]' \
                    '-u[show docs for unexported and exported symbols and methods]' \
                    ;;

                fix)
                  _arguments \
                    '-diff[display diffs instead of rewriting files]' \
                    '-force[force fixes to run even if the code looks updated]:string' \
                    '-r[restrict the rewrites]:string' \
                    '*:files:_files'
                  ;;

                link)
                  _arguments \
                    '-B[add an ELF NT_GNU_BUILD_ID note when using ELF]:note' \
                    '-C[check Go calls to C code]' \
                    '-D[set data segment address (default -1)]:address' \
                    '-E[set entry symbol name]:entry' \
                    '-H[set header type]:type' \
                    '-I[use linker as ELF dynamic linker]:linker' \
                    '-L[add specified directory to library path]:directory' \
                    '-R[set address rounding quantum (default -1)]:quantum' \
                    '-T[set text segment address (default -1)]:address' \
                    '-V[print version and exit]' \
                    '-W[disassemble input]' \
                    '-X[add string value definition]:definition' \
                    '-a[disassemble output]' \
                    '-buildid[record id as Go toolchain build id]:id' \
                    '-buildmode[set build mode]:mode' \
                    '-c[dump call graph]' \
                    '-cpuprofile[write cpu profile to file]:file' \
                    '-d[disable dynamic executable]' \
                    '-extld[use linker when linking in external mode]:linker' \
                    '-extldflags[pass flags to external linker]:flags' \
                    '-f[ignore version mismatch]' \
                    '-g[disable go package data checks]' \
                    '-h[halt on error]' \
                    '-installsuffix[set package directory suffix]:suffix' \
                    '-k[set field tracking symbol]:symbol' \
                    '-linkmode[set link mode]:mode:(internal external auto)' \
                    '-linkshared[link against installed Go shared libraries]' \
                    '-memprofile[write memory profile to file]:file' \
                    '-memprofilerate[set runtime.MemProfileRate to rate]:rate' \
                    '-n[dump symbol table]' \
                    '-o[write output to file]:file' \
                    '-r[set the ELF dynamic linker search path to dir1:dir2:...]:path' \
                    '-race[enable race detector]' \
                    '-s[disable symbol table]' \
                    '-shared[generate shared object (implies -linkmode external)]' \
                    '-tmpdir[use directory for temporary files]:directory' \
                    '-u[reject unsafe packages]' \
                    '-v[print link trace]' \
                    '-w[disable DWARF generation]' \
                    '*:files:_files'
                  ;;

                objdump)
                  _arguments \
                    '-s[only dump symbols matching this regexp]:regexp' \
                    '*:files:_files'
                  ;;

                pack)
                  _arguments '1:ops:(c p r t x)' '::verbose:(v)' ':files:_files'
                  ;;

                pprof)
                  local -a output_format output_file_parameter output_granularity comparison sorting
                  local -a dynamic_profile profile_trimming sample_index sample_heap sample_contention
                  local -a filtering miscellaneous

                  # Output format (only set one)
                  output_format=(
                  '(-disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-callgrind[Outputs a graph in callgrind format]'
                  '(-callgrind -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-disasm=[Output annotated assembly for functions matching regexp or address]:functions regexp pattern'
                  '(-callgrind -disasm -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-dot[Outputs a graph in DOT format]'
                  '(-callgrind -disasm -dot -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-eog[Visualize graph through eog]'
                  '(-callgrind -disasm -dot -eog -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-evince[Visualize graph through evince]'
                  '(-callgrind -disasm -dot -eog -evince -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-gif[Outputs a graph image in GIF format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-gv[Visualize graph through gv]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-list=[Output annotated source for functions matching regexp]:functions regexp pattern'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -peak -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-pdf[Outputs a graph in PDF format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -png -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-peek=[Output callers/callees of functions matching regexp]:functions regexp pattern'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -proto -ps -raw -svg -tags -text -top -tree -web -weblist)-png[Outputs a graph image in PNG format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -ps -raw -svg -tags -text -top -tree -web -weblist)-proto[Outputs the profile in compressed protobuf format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -raw -svg -tags -text -top -tree -web -weblist)-ps[Outputs a graph in PS format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -svg -tags -text -top -tree -web -weblist)-raw[Outputs a text representation of the raw profile]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -tags -text -top -tree -web -weblist)-svg[Outputs a graph in SVG format]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -text -top -tree -web -weblist)-tags[Outputs all tags in the profile]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -top -tree -web -weblist)-text[Outputs top entries in text form]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -tree -web -weblist)-top[Outputs top entries in text form]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -web -weblist)-tree[Outputs a text rendering of call graph]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -weblist)-web[Visualize graph through web browser]'
                  '(-callgrind -disasm -dot -eog -evince -gif -gv -list -pdf -peak -png -proto -ps -raw -svg -tags -text -top -tree -web)-weblist=[Output annotated source in HTML for functions matching regexp or address]:functions regexp pattern'
                  )
                  output_file_parameter=(
                  '-output:Generate output on file f (stdout by default)'
                  )
                  # Output granularity (only set one)
                  output_granularity=(
                  '(-files -lines -addresses)-functions[Report at function level \[default\]]'
                  '(-functions -lines -addresses)-files[Report at source file level]'
                  '(-functions -files -addresses)-lines[Report at source line level]'
                  '(-functions -files -lines)-addresses[Report at address level]'
                  )
                  comparison=(
                  '-base:Show delta from this profile'
                  '-drop_negative:Ignore negative differences'
                  )
                  sorting=(
                  '-cum:Sort by cumulative data'
                  )
                  dynamic_profile=(
                  '-seconds:Length of time for dynamic profiles'
                  )
                  profile_trimming=(
                  '-nodecount:Max number of nodes to show'
                  '-nodefraction:Hide nodes below <f>*total'
                  '-edgefraction:Hide edges below <f>*total'
                  )
                  sample_index=(
                  '-sample_index:Index of sample value to display'
                  '-mean:Average sample value over first value'
                  )
                  sample_heap=(
                  '-inuse_space:Display in-use memory size'
                  '-inuse_objects:Display in-use object counts'
                  '-alloc_space:Display allocated memory size'
                  '-alloc_objects:Display allocated object counts'
                  )
                  sample_contention=(
                  '-total_delay:Display total delay at each region'
                  '-contentions:Display number of delays at each region'
                  '-mean_delay:Display mean delay at each region'
                  )
                  filtering=(
                  '-runtime:Show runtime call frames in memory profiles'
                  '-focus:Restricts to paths going through a node matching regexp'
                  '-ignore:Skips paths going through any nodes matching regexp'
                  '-tagfocus:Restrict to samples tagged with key:value matching regexp'
                  '-tagignore:Discard samples tagged with key:value matching regexp'
                  )
                  miscellaneous=(
                  '-call_tree:Generate a context-sensitive call tree'
                  '-unit:Convert all samples to unit u for display'
                  '-divide_by:Scale all samples by dividing them by f'
                  '-buildid:Override build id for main binary in profile'
                  '-tools:Search path for object-level tools'
                  '-help:This message'
                  )

                  _arguments \
                    '1:target binary:_files' \
                    '*:profile data:_files' \
                    $output_format \
                    $output_granularity

                  _describe -t output_file_parameter "Output file parameters (for file-based output formats):" output_file_parameter
                  # _describe -t output_granularity "Output granularity (only set one):" output_granularity
                  _describe -t comparison "Comparison options:" comparison
                  _describe -t sorting "Output options:" sorting
                  _describe -t dynamic_profile "Dynamic profile options:" dynamic_profile
                  _describe -t profile_trimming "Profile trimming options:" profile_trimming
                  _describe -t sample_index "Sample value selection option (by index):" sample_index
                  _describe -t sample_heap "Sample value selection option (for heap profiles):" sample_heap
                  _describe -t sample_contention "Sample value selection option (for contention profiles):" sample_contention
                  _describe -t filtering "Filtering options:" filtering
                  _describe -t miscellaneous "miscellaneous:" miscellaneous
                  ;;

                trace)
                  _arguments \
                    '-http=[HTTP service address]:addr' \
                    '*:files:_files'
                  ;;

                vet)
                  _arguments \
                    '-all[check everything]' \
                    '-asmdecl[check assembly against Go declarations]' \
                    '-assign[check for useless assignments]' \
                    '-atomic[check for common mistaken usages of the sync/atomic]' \
                    '-bool[check for mistakes involving boolean operators]' \
                    '-buildtags[check that +build tags are valid]' \
                    '-composites[check that composite literals used field-keyed elements]' \
                    '-compositewhitelist[use composite white list]' \
                    '-copylocks[check that locks are not passed by value]' \
                    '-methods[check that canonically named methods are canonically defined]' \
                    '-nilfunc[check for comparisons between functions and nil]' \
                    '-printf[check printf-like invocations]' \
                    '-printfuncs[print function names to check]:string' \
                    '-rangeloops[check that range loop variables are used correctly]' \
                    '-shadow[check for shadowed variables]' \
                    '-shadowstrict[whether to be strict about shadowing]' \
                    '-shift[check for useless shifts]' \
                    '-structtags[check that struct field tags have canonical format]' \
                    '-tags[list of build tags to apply when parsing]:list' \
                    '-test[for testing only: sets -all and -shadow]' \
                    '-unreachable[check for unreachable code]' \
                    '-unsafeptr[check for misuse of unsafe.Pointer]' \
                    '-unusedfuncs[list of functions whose results must be used]:string' \
                    '-unusedresult[check for unused result of calls to functions in -unusedfuncs]' \
                    '-unusedstringmethods[list of methods whose results must be used]:string' \
                    '-v[verbose]' \
                    '*:files:_files'
                  ;;

                yacc)
                  _arguments \
                    '-o[output]:output' \
                    '-v[parsetable]:parsetable' \
                    '*:files:_files'
                  ;;
              esac
              ;;
          esac
          ;;

        vet)
          _values \
            'vet flags' \
            '-n[print commands that would be executed]' \
            '-x[prints commands as they are executed]' \
            '*:build flags:__go_packages'
          _alternative ':build flags:__build_flags'
          ;;

        help)
          local -a topics
          topics=(
          'c:calling between Go and C'
          'buildmode:description of build modes'
          'filetype:file types'
          'gopath:GOPATH environment variable'
          'environment:environment variables'
          'importpath:import path syntax'
          'packages:description of package lists'
          'testflag:description of testing flags'
          'testfunc:description of testing functions'
          )
          _arguments "1: :{_describe 'command' commands -- topics}"
          ;;
      esac
      ;;
  esac
}

_go

# vim:ft=zsh:sts=2:sw=2:ts=2:et
