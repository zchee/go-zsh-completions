#compdef go-langserver

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2018, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# github.com/sourcegraph/go-langserver
#
# Usage of go-langserver:
#   -addr string
#     	server listen address (tcp) (default ":4389")
#   -freeosmemory
#     	aggressively free memory back to the OS (default true)
#   -func-snippet-enabled
#     	enable argument snippets on func completion (default true)
#   -gocodecompletion
#     	enable completion (extra memory burden)
#   -logfile string
#     	also log to this file (in addition to stderr)
#   -maxparallelism int
#     	use at max N parallel goroutines to fulfill requests (default -1)
#   -mode string
#     	communication mode (stdio|tcp) (default "stdio")
#   -pprof string
#     	start a pprof http server (https://golang.org/pkg/net/http/pprof/) (default ":6060")
#   -trace
#     	print all requests and responses
#   -usebinarypkgcache
#     	use $GOPATH/pkg binary .a files (improves performance) (default true)
#   -version
#     	print version and exit
#
# -----------------------------------------------------------------------------

function _go-langserver() {
  local context curcontext=$curcontext state line ret=1
  declare -A opt_args

  _arguments -C \
    '-addr[server listen address (tcp) (default ":4389")]:addr' \
    '-freeosmemory=[aggressively free memory back to the OS (default true)]:bool:(true false)' \
    '-func-snippet-enabled=[enable argument snippets on func completion (default true)]:bool:(true false)' \
    '-gocodecompletion[enable completion (extra memory burden)]' \
    '-logfile[also log to this file (in addition to stderr)]:log file:_files' \
    '-maxparallelism[use at max N parallel goroutines to fulfill requests (default -1)]:max parallelism' \
    '-mode[communication mode (stdio|tcp) (default "stdio")]:mode:(stdio tcp)' \
    '-pprof[start a pprof http server (https://golang.org/pkg/net/http/pprof/) (default ":6060")]:pprof addr' \
    '-trace[print all requests and responses]' \
    '-usebinarypkgcache[use $GOPATH/pkg binary .a files (improves performance) (default true)]:bool:(true false)' \
    '-version[print version and exit]' \
    && ret=0

  return ret
}

_go-langserver "$*"

# vim:ft=zsh:et:sts=2:sw=2
