#compdef dlv

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2016, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# github.com/derekparker/delve/cmd/dlv
#
# Delve is a source level debugger for Go programs.
#
# Delve enables you to interact with your program by controlling the execution of the process,
# evaluating variables, and providing information of thread / goroutine state, CPU register state and more.
#
# The goal of this tool is to provide a simple yet powerful interface for debugging Go programs.
#
# Pass flags to the program you are debugging using `--`, for example:
#
# `dlv exec ./hello -- server --config conf/config.toml`
#
# Usage:
#   dlv [command]
#
# Available Commands:
#   attach      Attach to running process and begin debugging.
#   connect     Connect to a headless debug server.
#   core        Examine a core dump.
#   debug       Compile and begin debugging main package in current directory, or the package specified.
#   exec        Execute a precompiled binary, and begin a debug session.
#   help        Help about any command
#   run         Deprecated command. Use 'debug' instead.
#   test        Compile test binary and begin debugging program.
#   trace       Compile and begin tracing program.
#   version     Prints version.
#
# Flags:
#       --accept-multiclient   Allows a headless server to accept multiple client connections. Note that the server API is not reentrant and clients will have to coordinate.
#       --api-version int      Selects API version when headless. (default 1)
#       --backend string       Backend selection:
#         default         Uses lldb on macOS, native everywhere else.
#         native          Native backend.
#         lldb            Uses lldb-server or debugserver.
#         rr              Uses mozilla rr (https://github.com/mozilla/rr).
#  (default "default")
#       --build-flags string   Build flags, to be passed to the compiler.
#       --headless             Run debug server only, in headless mode.
#       --init string          Init file, executed by the terminal client.
#   -l, --listen string        Debugging server listen address. (default "localhost:0")
#       --log                  Enable debugging server logging.
#       --wd string            Working directory for running the program. (default ".")
#
# Use "dlv [command] --help" for more information about a command.
#
# -----------------------------------------------------------------------------

function _dlv() {
  local context curcontext=$curcontext state line ret=1
  declare -A opt_args

  local -a commands

  commands=(
  'attach:Attach to running process and begin debugging.'
  'connect:Connect to a headless debug server.'
  'core:Examine a core dump.'
  'debug:Compile and begin debugging main package in current directory, or the package specified.'
  'exec:Execute a precompiled binary, and begin a debug session.'
  'help:Help about any command'
  "run:Deprecated command. Use 'debug' instead."
  'test:Compile test binary and begin debugging program.'
  'trace:Compile and begin tracing program.'
  'version:Prints version.'
  )

  _arguments -C \
    "1: :{_describe 'dlv command' commands}" \
    '--accept-multiclient[Allows a headless server to accept multiple client connections.]' \
    '--api-version[Selects API version when headless. (default 1)]:API version (int)' \
    '--backend[Backend selection]:backend:->backend' \
    '--build-flags[Build flags, to be passed to the compiler.]:build flags' \
    '--headless[Run debug server only, in headless mode.]' \
    '--init[Init file, executed by the terminal client.]:file:_files' \
    {-l,--listen}'[Debugging server listen address. (default "localhost:0")]:listen address' \
    '--log[Enable debugging server logging.]' \
    '--wd[Working directory for running the program. (default ".")]' \
    '*:: :->args' \
    && ret=0

  case $state in
    (backend)
      local -a _backend
      _backend=(
      'default:Uses lldb on macOS, native everywhere else.'
      'native:Native backend.'
      'lldb:Uses lldb-server or debugserver.'
      'rr:Uses mozilla rr (https://github.com/mozilla/rr).'
      )
      _describe 'backend' _backend
      ;;
  esac

  return ret
}

_dlv "$*"

# vim:ft=zsh:et:sts=2:sw=2
