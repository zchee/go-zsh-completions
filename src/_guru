#compdef guru

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2016, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# golang.org/x/tools/cmd/guru
#
# Go source code guru.
# Usage: guru [flags] <mode> <position>
#
# The mode argument determines the query to perform:
#
#         callees         show possible targets of selected function call
#         callers         show possible callers of selected function
#         callstack       show path from callgraph root to selected function
#         definition      show declaration of selected identifier
#         describe        describe selected syntax: definition, methods, etc
#         freevars        show free variables of selection
#         implements      show 'implements' relation for selected type or method
#         peers           show send/receive corresponding to selected channel op
#         pointsto        show variables the selected pointer may point to
#         referrers       show all refs to entity denoted by selected identifier
#         what            show basic information about the selected syntax node
#         whicherrs       show possible values of the selected error variable
#
# The position argument specifies the filename and byte offset (or range)
# of the syntax element to query.  For example:
#
#         foo.go:#123,#128
#         bar.go:#123
#
# The -json flag causes guru to emit output in JSON format;
#         golang.org/x/tools/cmd/guru/serial defines its schema.
#         Otherwise, the output is in an editor-friendly format in which
#         every line has the form "pos: text", where pos is "-" if unknown.
#
# The -modified flag causes guru to read an archive from standard input.
#         Files in this archive will be used in preference to those in
#         the file system.  In this way, a text editor may supply guru
#         with the contents of its unsaved buffers.  Each archive entry
#         consists of the file name, a newline, the decimal file size,
#         another newline, and the contents of the file.
#
# The -scope flag restricts analysis to the specified packages.
#         Its value is a comma-separated list of patterns of these forms:
#                 golang.org/x/tools/cmd/guru     # a single package
#                 golang.org/x/tools/...          # all packages beneath dir
#                 ...                             # the entire workspace.
#         A pattern preceded by '-' is negative, so the scope
#                 encoding/...,-encoding/xml
#         matches all encoding packages except encoding/xml.
#
# User manual: http://golang.org/s/using-guru
#
# Example: describe syntax at offset 530 in this file (an import spec):
#
#   $ guru describe src/golang.org/x/tools/cmd/guru/main.go:#530
#
# Flags:
#   -cpuprofile file
#         write CPU profile to file
#   -json
#         emit output in JSON format
#   -modified
#         read archive of modified files from standard input
#   -ptalog file
#         write points-to analysis log to file
#   -reflect
#         analyze reflection soundly (slow)
#   -scope packages
#         comma-separated list of packages the analysis should be limited to
#   -tags build tags
#         a list of build tags to consider satisfied during the build. For more information about build tags, see the description of build constraints in the documentation for the go/build package
#
# -----------------------------------------------------------------------------

_guru() {
  local -a commands
  commands=(
  'callees:show possible targets of selected function call'
  'callers:show possible callers of selected function'
  'callstack:show path from callgraph root to selected function'
  'definition:show declaration of selected identifier'
  'describe:describe selected syntax: definition, methods, etc'
  'freevars:show free variables of selection'
  "implements:show 'implements' relation for selected type or method"
  'peers:show send/receive corresponding to selected channel op'
  'pointsto:show variables the selected pointer may point to'
  'referrers:show all refs to entity denoted by selected identifier'
  'what:show basic information about the selected syntax node'
  'whicherrs:show possible values of the selected error variable'
  )

  _arguments \
    '-cpuprofile:write cpu profile to file:_file' \
    '-json:emit output in JSON format' \
    '-modified:read archive of modified files from standard input' \
    '-ptalog:write points-to analysis log to file:_file' \
    '-reflect[analyze reflection soundly (slow)]' \
    '-scope:comma-separated list of packages the analysis should be limited to:__go_packages' \
    '-tags[a list of build tags to consider satisfied during the build]:tags' \
    "1: :{_describe 'guru command' commands}" \
    '*:: :->args' \
    && ret=0

  case $state in
    (args)
        if compset -P '*:\\\#*,'; then
          _arguments '*:end offset' && ret=0
        elif compset -P '*:\\\#'; then
          _arguments '*:start offset' && ret=0
        else
          _alternative '*:file:_sequence -s ":#" _files' && ret=0
        fi
      ;;
  esac
}


_guru "$*"

# vim:ft=zsh:et:sts=2:sw=2
